/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as LayoutIndexRouteImport } from './routes/_layout.index'
import { Route as InvitationLayoutRouteImport } from './routes/invitation/_layout'
import { Route as CreateOrganizationLayoutRouteImport } from './routes/create-organization/_layout'
import { Route as authLayoutRouteImport } from './routes/(auth)/_layout'
import { Route as OrganizationSlugLayoutRouteImport } from './routes/$organizationSlug/_layout'
import { Route as InvitationLayoutIndexRouteImport } from './routes/invitation/_layout.index'
import { Route as CreateOrganizationLayoutIndexRouteImport } from './routes/create-organization/_layout.index'
import { Route as OrganizationSlugLayoutIndexRouteImport } from './routes/$organizationSlug/_layout.index'
import { Route as authLayoutSignUpRouteImport } from './routes/(auth)/_layout.sign-up'
import { Route as authLayoutResetPasswordRouteImport } from './routes/(auth)/_layout.reset-password'
import { Route as authLayoutLoginRouteImport } from './routes/(auth)/_layout.login'
import { Route as authLayoutForgotPasswordRouteImport } from './routes/(auth)/_layout.forgot-password'
import { Route as OrganizationSlugLayoutSettingsRouteImport } from './routes/$organizationSlug/_layout.settings'
import { Route as OrganizationSlugLayoutUsersIndexRouteImport } from './routes/$organizationSlug/_layout.users/index'
import { Route as OrganizationSlugLayoutTeamsIndexRouteImport } from './routes/$organizationSlug/_layout.teams/index'
import { Route as OrganizationSlugLayoutStatusUpdateIndexRouteImport } from './routes/$organizationSlug/_layout.status-update/index'
import { Route as OrganizationSlugLayoutUsersUserIdRouteImport } from './routes/$organizationSlug/_layout.users/$userId'
import { Route as OrganizationSlugLayoutTeamsTeamIdRouteImport } from './routes/$organizationSlug/_layout.teams/$teamId'
import { Route as OrganizationSlugLayoutStatusUpdateStatusUpdateIdRouteImport } from './routes/$organizationSlug/_layout.status-update/$statusUpdateId'

const InvitationRouteImport = createFileRoute('/invitation')()
const CreateOrganizationRouteImport = createFileRoute('/create-organization')()
const authRouteImport = createFileRoute('/(auth)')()
const OrganizationSlugRouteImport = createFileRoute('/$organizationSlug')()

const InvitationRoute = InvitationRouteImport.update({
  id: '/invitation',
  path: '/invitation',
  getParentRoute: () => rootRouteImport,
} as any)
const CreateOrganizationRoute = CreateOrganizationRouteImport.update({
  id: '/create-organization',
  path: '/create-organization',
  getParentRoute: () => rootRouteImport,
} as any)
const authRoute = authRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const OrganizationSlugRoute = OrganizationSlugRouteImport.update({
  id: '/$organizationSlug',
  path: '/$organizationSlug',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutIndexRoute = LayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)
const InvitationLayoutRoute = InvitationLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => InvitationRoute,
} as any)
const CreateOrganizationLayoutRoute =
  CreateOrganizationLayoutRouteImport.update({
    id: '/_layout',
    getParentRoute: () => CreateOrganizationRoute,
  } as any)
const authLayoutRoute = authLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => authRoute,
} as any)
const OrganizationSlugLayoutRoute = OrganizationSlugLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => OrganizationSlugRoute,
} as any)
const InvitationLayoutIndexRoute = InvitationLayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => InvitationLayoutRoute,
} as any)
const CreateOrganizationLayoutIndexRoute =
  CreateOrganizationLayoutIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => CreateOrganizationLayoutRoute,
  } as any)
const OrganizationSlugLayoutIndexRoute =
  OrganizationSlugLayoutIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => OrganizationSlugLayoutRoute,
  } as any)
const authLayoutSignUpRoute = authLayoutSignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => authLayoutRoute,
} as any)
const authLayoutResetPasswordRoute = authLayoutResetPasswordRouteImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => authLayoutRoute,
} as any)
const authLayoutLoginRoute = authLayoutLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authLayoutRoute,
} as any)
const authLayoutForgotPasswordRoute =
  authLayoutForgotPasswordRouteImport.update({
    id: '/forgot-password',
    path: '/forgot-password',
    getParentRoute: () => authLayoutRoute,
  } as any)
const OrganizationSlugLayoutSettingsRoute =
  OrganizationSlugLayoutSettingsRouteImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => OrganizationSlugLayoutRoute,
  } as any)
const OrganizationSlugLayoutUsersIndexRoute =
  OrganizationSlugLayoutUsersIndexRouteImport.update({
    id: '/users/',
    path: '/users/',
    getParentRoute: () => OrganizationSlugLayoutRoute,
  } as any)
const OrganizationSlugLayoutTeamsIndexRoute =
  OrganizationSlugLayoutTeamsIndexRouteImport.update({
    id: '/teams/',
    path: '/teams/',
    getParentRoute: () => OrganizationSlugLayoutRoute,
  } as any)
const OrganizationSlugLayoutStatusUpdateIndexRoute =
  OrganizationSlugLayoutStatusUpdateIndexRouteImport.update({
    id: '/status-update/',
    path: '/status-update/',
    getParentRoute: () => OrganizationSlugLayoutRoute,
  } as any)
const OrganizationSlugLayoutUsersUserIdRoute =
  OrganizationSlugLayoutUsersUserIdRouteImport.update({
    id: '/users/$userId',
    path: '/users/$userId',
    getParentRoute: () => OrganizationSlugLayoutRoute,
  } as any)
const OrganizationSlugLayoutTeamsTeamIdRoute =
  OrganizationSlugLayoutTeamsTeamIdRouteImport.update({
    id: '/teams/$teamId',
    path: '/teams/$teamId',
    getParentRoute: () => OrganizationSlugLayoutRoute,
  } as any)
const OrganizationSlugLayoutStatusUpdateStatusUpdateIdRoute =
  OrganizationSlugLayoutStatusUpdateStatusUpdateIdRouteImport.update({
    id: '/status-update/$statusUpdateId',
    path: '/status-update/$statusUpdateId',
    getParentRoute: () => OrganizationSlugLayoutRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/$organizationSlug': typeof OrganizationSlugLayoutRouteWithChildren
  '/': typeof LayoutIndexRoute
  '/create-organization': typeof CreateOrganizationLayoutRouteWithChildren
  '/invitation': typeof InvitationLayoutRouteWithChildren
  '/$organizationSlug/settings': typeof OrganizationSlugLayoutSettingsRoute
  '/forgot-password': typeof authLayoutForgotPasswordRoute
  '/login': typeof authLayoutLoginRoute
  '/reset-password': typeof authLayoutResetPasswordRoute
  '/sign-up': typeof authLayoutSignUpRoute
  '/$organizationSlug/': typeof OrganizationSlugLayoutIndexRoute
  '/create-organization/': typeof CreateOrganizationLayoutIndexRoute
  '/invitation/': typeof InvitationLayoutIndexRoute
  '/$organizationSlug/status-update/$statusUpdateId': typeof OrganizationSlugLayoutStatusUpdateStatusUpdateIdRoute
  '/$organizationSlug/teams/$teamId': typeof OrganizationSlugLayoutTeamsTeamIdRoute
  '/$organizationSlug/users/$userId': typeof OrganizationSlugLayoutUsersUserIdRoute
  '/$organizationSlug/status-update': typeof OrganizationSlugLayoutStatusUpdateIndexRoute
  '/$organizationSlug/teams': typeof OrganizationSlugLayoutTeamsIndexRoute
  '/$organizationSlug/users': typeof OrganizationSlugLayoutUsersIndexRoute
}
export interface FileRoutesByTo {
  '/$organizationSlug': typeof OrganizationSlugLayoutIndexRoute
  '/': typeof LayoutIndexRoute
  '/create-organization': typeof CreateOrganizationLayoutIndexRoute
  '/invitation': typeof InvitationLayoutIndexRoute
  '/$organizationSlug/settings': typeof OrganizationSlugLayoutSettingsRoute
  '/forgot-password': typeof authLayoutForgotPasswordRoute
  '/login': typeof authLayoutLoginRoute
  '/reset-password': typeof authLayoutResetPasswordRoute
  '/sign-up': typeof authLayoutSignUpRoute
  '/$organizationSlug/status-update/$statusUpdateId': typeof OrganizationSlugLayoutStatusUpdateStatusUpdateIdRoute
  '/$organizationSlug/teams/$teamId': typeof OrganizationSlugLayoutTeamsTeamIdRoute
  '/$organizationSlug/users/$userId': typeof OrganizationSlugLayoutUsersUserIdRoute
  '/$organizationSlug/status-update': typeof OrganizationSlugLayoutStatusUpdateIndexRoute
  '/$organizationSlug/teams': typeof OrganizationSlugLayoutTeamsIndexRoute
  '/$organizationSlug/users': typeof OrganizationSlugLayoutUsersIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_layout': typeof LayoutRouteWithChildren
  '/$organizationSlug': typeof OrganizationSlugRouteWithChildren
  '/$organizationSlug/_layout': typeof OrganizationSlugLayoutRouteWithChildren
  '/(auth)': typeof authRouteWithChildren
  '/(auth)/_layout': typeof authLayoutRouteWithChildren
  '/create-organization': typeof CreateOrganizationRouteWithChildren
  '/create-organization/_layout': typeof CreateOrganizationLayoutRouteWithChildren
  '/invitation': typeof InvitationRouteWithChildren
  '/invitation/_layout': typeof InvitationLayoutRouteWithChildren
  '/_layout/': typeof LayoutIndexRoute
  '/$organizationSlug/_layout/settings': typeof OrganizationSlugLayoutSettingsRoute
  '/(auth)/_layout/forgot-password': typeof authLayoutForgotPasswordRoute
  '/(auth)/_layout/login': typeof authLayoutLoginRoute
  '/(auth)/_layout/reset-password': typeof authLayoutResetPasswordRoute
  '/(auth)/_layout/sign-up': typeof authLayoutSignUpRoute
  '/$organizationSlug/_layout/': typeof OrganizationSlugLayoutIndexRoute
  '/create-organization/_layout/': typeof CreateOrganizationLayoutIndexRoute
  '/invitation/_layout/': typeof InvitationLayoutIndexRoute
  '/$organizationSlug/_layout/status-update/$statusUpdateId': typeof OrganizationSlugLayoutStatusUpdateStatusUpdateIdRoute
  '/$organizationSlug/_layout/teams/$teamId': typeof OrganizationSlugLayoutTeamsTeamIdRoute
  '/$organizationSlug/_layout/users/$userId': typeof OrganizationSlugLayoutUsersUserIdRoute
  '/$organizationSlug/_layout/status-update/': typeof OrganizationSlugLayoutStatusUpdateIndexRoute
  '/$organizationSlug/_layout/teams/': typeof OrganizationSlugLayoutTeamsIndexRoute
  '/$organizationSlug/_layout/users/': typeof OrganizationSlugLayoutUsersIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/$organizationSlug'
    | '/'
    | '/create-organization'
    | '/invitation'
    | '/$organizationSlug/settings'
    | '/forgot-password'
    | '/login'
    | '/reset-password'
    | '/sign-up'
    | '/$organizationSlug/'
    | '/create-organization/'
    | '/invitation/'
    | '/$organizationSlug/status-update/$statusUpdateId'
    | '/$organizationSlug/teams/$teamId'
    | '/$organizationSlug/users/$userId'
    | '/$organizationSlug/status-update'
    | '/$organizationSlug/teams'
    | '/$organizationSlug/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/$organizationSlug'
    | '/'
    | '/create-organization'
    | '/invitation'
    | '/$organizationSlug/settings'
    | '/forgot-password'
    | '/login'
    | '/reset-password'
    | '/sign-up'
    | '/$organizationSlug/status-update/$statusUpdateId'
    | '/$organizationSlug/teams/$teamId'
    | '/$organizationSlug/users/$userId'
    | '/$organizationSlug/status-update'
    | '/$organizationSlug/teams'
    | '/$organizationSlug/users'
  id:
    | '__root__'
    | '/_layout'
    | '/$organizationSlug'
    | '/$organizationSlug/_layout'
    | '/(auth)'
    | '/(auth)/_layout'
    | '/create-organization'
    | '/create-organization/_layout'
    | '/invitation'
    | '/invitation/_layout'
    | '/_layout/'
    | '/$organizationSlug/_layout/settings'
    | '/(auth)/_layout/forgot-password'
    | '/(auth)/_layout/login'
    | '/(auth)/_layout/reset-password'
    | '/(auth)/_layout/sign-up'
    | '/$organizationSlug/_layout/'
    | '/create-organization/_layout/'
    | '/invitation/_layout/'
    | '/$organizationSlug/_layout/status-update/$statusUpdateId'
    | '/$organizationSlug/_layout/teams/$teamId'
    | '/$organizationSlug/_layout/users/$userId'
    | '/$organizationSlug/_layout/status-update/'
    | '/$organizationSlug/_layout/teams/'
    | '/$organizationSlug/_layout/users/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  OrganizationSlugRoute: typeof OrganizationSlugRouteWithChildren
  authRoute: typeof authRouteWithChildren
  CreateOrganizationRoute: typeof CreateOrganizationRouteWithChildren
  InvitationRoute: typeof InvitationRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/invitation': {
      id: '/invitation'
      path: '/invitation'
      fullPath: '/invitation'
      preLoaderRoute: typeof InvitationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/create-organization': {
      id: '/create-organization'
      path: '/create-organization'
      fullPath: '/create-organization'
      preLoaderRoute: typeof CreateOrganizationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$organizationSlug': {
      id: '/$organizationSlug'
      path: '/$organizationSlug'
      fullPath: '/$organizationSlug'
      preLoaderRoute: typeof OrganizationSlugRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/invitation/_layout': {
      id: '/invitation/_layout'
      path: '/invitation'
      fullPath: '/invitation'
      preLoaderRoute: typeof InvitationLayoutRouteImport
      parentRoute: typeof InvitationRoute
    }
    '/create-organization/_layout': {
      id: '/create-organization/_layout'
      path: '/create-organization'
      fullPath: '/create-organization'
      preLoaderRoute: typeof CreateOrganizationLayoutRouteImport
      parentRoute: typeof CreateOrganizationRoute
    }
    '/(auth)/_layout': {
      id: '/(auth)/_layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authLayoutRouteImport
      parentRoute: typeof authRoute
    }
    '/$organizationSlug/_layout': {
      id: '/$organizationSlug/_layout'
      path: '/$organizationSlug'
      fullPath: '/$organizationSlug'
      preLoaderRoute: typeof OrganizationSlugLayoutRouteImport
      parentRoute: typeof OrganizationSlugRoute
    }
    '/invitation/_layout/': {
      id: '/invitation/_layout/'
      path: '/'
      fullPath: '/invitation/'
      preLoaderRoute: typeof InvitationLayoutIndexRouteImport
      parentRoute: typeof InvitationLayoutRoute
    }
    '/create-organization/_layout/': {
      id: '/create-organization/_layout/'
      path: '/'
      fullPath: '/create-organization/'
      preLoaderRoute: typeof CreateOrganizationLayoutIndexRouteImport
      parentRoute: typeof CreateOrganizationLayoutRoute
    }
    '/$organizationSlug/_layout/': {
      id: '/$organizationSlug/_layout/'
      path: '/'
      fullPath: '/$organizationSlug/'
      preLoaderRoute: typeof OrganizationSlugLayoutIndexRouteImport
      parentRoute: typeof OrganizationSlugLayoutRoute
    }
    '/(auth)/_layout/sign-up': {
      id: '/(auth)/_layout/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof authLayoutSignUpRouteImport
      parentRoute: typeof authLayoutRoute
    }
    '/(auth)/_layout/reset-password': {
      id: '/(auth)/_layout/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof authLayoutResetPasswordRouteImport
      parentRoute: typeof authLayoutRoute
    }
    '/(auth)/_layout/login': {
      id: '/(auth)/_layout/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLayoutLoginRouteImport
      parentRoute: typeof authLayoutRoute
    }
    '/(auth)/_layout/forgot-password': {
      id: '/(auth)/_layout/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof authLayoutForgotPasswordRouteImport
      parentRoute: typeof authLayoutRoute
    }
    '/$organizationSlug/_layout/settings': {
      id: '/$organizationSlug/_layout/settings'
      path: '/settings'
      fullPath: '/$organizationSlug/settings'
      preLoaderRoute: typeof OrganizationSlugLayoutSettingsRouteImport
      parentRoute: typeof OrganizationSlugLayoutRoute
    }
    '/$organizationSlug/_layout/users/': {
      id: '/$organizationSlug/_layout/users/'
      path: '/users'
      fullPath: '/$organizationSlug/users'
      preLoaderRoute: typeof OrganizationSlugLayoutUsersIndexRouteImport
      parentRoute: typeof OrganizationSlugLayoutRoute
    }
    '/$organizationSlug/_layout/teams/': {
      id: '/$organizationSlug/_layout/teams/'
      path: '/teams'
      fullPath: '/$organizationSlug/teams'
      preLoaderRoute: typeof OrganizationSlugLayoutTeamsIndexRouteImport
      parentRoute: typeof OrganizationSlugLayoutRoute
    }
    '/$organizationSlug/_layout/status-update/': {
      id: '/$organizationSlug/_layout/status-update/'
      path: '/status-update'
      fullPath: '/$organizationSlug/status-update'
      preLoaderRoute: typeof OrganizationSlugLayoutStatusUpdateIndexRouteImport
      parentRoute: typeof OrganizationSlugLayoutRoute
    }
    '/$organizationSlug/_layout/users/$userId': {
      id: '/$organizationSlug/_layout/users/$userId'
      path: '/users/$userId'
      fullPath: '/$organizationSlug/users/$userId'
      preLoaderRoute: typeof OrganizationSlugLayoutUsersUserIdRouteImport
      parentRoute: typeof OrganizationSlugLayoutRoute
    }
    '/$organizationSlug/_layout/teams/$teamId': {
      id: '/$organizationSlug/_layout/teams/$teamId'
      path: '/teams/$teamId'
      fullPath: '/$organizationSlug/teams/$teamId'
      preLoaderRoute: typeof OrganizationSlugLayoutTeamsTeamIdRouteImport
      parentRoute: typeof OrganizationSlugLayoutRoute
    }
    '/$organizationSlug/_layout/status-update/$statusUpdateId': {
      id: '/$organizationSlug/_layout/status-update/$statusUpdateId'
      path: '/status-update/$statusUpdateId'
      fullPath: '/$organizationSlug/status-update/$statusUpdateId'
      preLoaderRoute: typeof OrganizationSlugLayoutStatusUpdateStatusUpdateIdRouteImport
      parentRoute: typeof OrganizationSlugLayoutRoute
    }
  }
}

interface LayoutRouteChildren {
  LayoutIndexRoute: typeof LayoutIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutIndexRoute: LayoutIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

interface OrganizationSlugLayoutRouteChildren {
  OrganizationSlugLayoutSettingsRoute: typeof OrganizationSlugLayoutSettingsRoute
  OrganizationSlugLayoutIndexRoute: typeof OrganizationSlugLayoutIndexRoute
  OrganizationSlugLayoutStatusUpdateStatusUpdateIdRoute: typeof OrganizationSlugLayoutStatusUpdateStatusUpdateIdRoute
  OrganizationSlugLayoutTeamsTeamIdRoute: typeof OrganizationSlugLayoutTeamsTeamIdRoute
  OrganizationSlugLayoutUsersUserIdRoute: typeof OrganizationSlugLayoutUsersUserIdRoute
  OrganizationSlugLayoutStatusUpdateIndexRoute: typeof OrganizationSlugLayoutStatusUpdateIndexRoute
  OrganizationSlugLayoutTeamsIndexRoute: typeof OrganizationSlugLayoutTeamsIndexRoute
  OrganizationSlugLayoutUsersIndexRoute: typeof OrganizationSlugLayoutUsersIndexRoute
}

const OrganizationSlugLayoutRouteChildren: OrganizationSlugLayoutRouteChildren =
  {
    OrganizationSlugLayoutSettingsRoute: OrganizationSlugLayoutSettingsRoute,
    OrganizationSlugLayoutIndexRoute: OrganizationSlugLayoutIndexRoute,
    OrganizationSlugLayoutStatusUpdateStatusUpdateIdRoute:
      OrganizationSlugLayoutStatusUpdateStatusUpdateIdRoute,
    OrganizationSlugLayoutTeamsTeamIdRoute:
      OrganizationSlugLayoutTeamsTeamIdRoute,
    OrganizationSlugLayoutUsersUserIdRoute:
      OrganizationSlugLayoutUsersUserIdRoute,
    OrganizationSlugLayoutStatusUpdateIndexRoute:
      OrganizationSlugLayoutStatusUpdateIndexRoute,
    OrganizationSlugLayoutTeamsIndexRoute:
      OrganizationSlugLayoutTeamsIndexRoute,
    OrganizationSlugLayoutUsersIndexRoute:
      OrganizationSlugLayoutUsersIndexRoute,
  }

const OrganizationSlugLayoutRouteWithChildren =
  OrganizationSlugLayoutRoute._addFileChildren(
    OrganizationSlugLayoutRouteChildren,
  )

interface OrganizationSlugRouteChildren {
  OrganizationSlugLayoutRoute: typeof OrganizationSlugLayoutRouteWithChildren
}

const OrganizationSlugRouteChildren: OrganizationSlugRouteChildren = {
  OrganizationSlugLayoutRoute: OrganizationSlugLayoutRouteWithChildren,
}

const OrganizationSlugRouteWithChildren =
  OrganizationSlugRoute._addFileChildren(OrganizationSlugRouteChildren)

interface authLayoutRouteChildren {
  authLayoutForgotPasswordRoute: typeof authLayoutForgotPasswordRoute
  authLayoutLoginRoute: typeof authLayoutLoginRoute
  authLayoutResetPasswordRoute: typeof authLayoutResetPasswordRoute
  authLayoutSignUpRoute: typeof authLayoutSignUpRoute
}

const authLayoutRouteChildren: authLayoutRouteChildren = {
  authLayoutForgotPasswordRoute: authLayoutForgotPasswordRoute,
  authLayoutLoginRoute: authLayoutLoginRoute,
  authLayoutResetPasswordRoute: authLayoutResetPasswordRoute,
  authLayoutSignUpRoute: authLayoutSignUpRoute,
}

const authLayoutRouteWithChildren = authLayoutRoute._addFileChildren(
  authLayoutRouteChildren,
)

interface authRouteChildren {
  authLayoutRoute: typeof authLayoutRouteWithChildren
}

const authRouteChildren: authRouteChildren = {
  authLayoutRoute: authLayoutRouteWithChildren,
}

const authRouteWithChildren = authRoute._addFileChildren(authRouteChildren)

interface CreateOrganizationLayoutRouteChildren {
  CreateOrganizationLayoutIndexRoute: typeof CreateOrganizationLayoutIndexRoute
}

const CreateOrganizationLayoutRouteChildren: CreateOrganizationLayoutRouteChildren =
  {
    CreateOrganizationLayoutIndexRoute: CreateOrganizationLayoutIndexRoute,
  }

const CreateOrganizationLayoutRouteWithChildren =
  CreateOrganizationLayoutRoute._addFileChildren(
    CreateOrganizationLayoutRouteChildren,
  )

interface CreateOrganizationRouteChildren {
  CreateOrganizationLayoutRoute: typeof CreateOrganizationLayoutRouteWithChildren
}

const CreateOrganizationRouteChildren: CreateOrganizationRouteChildren = {
  CreateOrganizationLayoutRoute: CreateOrganizationLayoutRouteWithChildren,
}

const CreateOrganizationRouteWithChildren =
  CreateOrganizationRoute._addFileChildren(CreateOrganizationRouteChildren)

interface InvitationLayoutRouteChildren {
  InvitationLayoutIndexRoute: typeof InvitationLayoutIndexRoute
}

const InvitationLayoutRouteChildren: InvitationLayoutRouteChildren = {
  InvitationLayoutIndexRoute: InvitationLayoutIndexRoute,
}

const InvitationLayoutRouteWithChildren =
  InvitationLayoutRoute._addFileChildren(InvitationLayoutRouteChildren)

interface InvitationRouteChildren {
  InvitationLayoutRoute: typeof InvitationLayoutRouteWithChildren
}

const InvitationRouteChildren: InvitationRouteChildren = {
  InvitationLayoutRoute: InvitationLayoutRouteWithChildren,
}

const InvitationRouteWithChildren = InvitationRoute._addFileChildren(
  InvitationRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  OrganizationSlugRoute: OrganizationSlugRouteWithChildren,
  authRoute: authRouteWithChildren,
  CreateOrganizationRoute: CreateOrganizationRouteWithChildren,
  InvitationRoute: InvitationRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

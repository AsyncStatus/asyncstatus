/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout.index'
import { Route as InvitationLayoutImport } from './routes/invitation/_layout'
import { Route as CreateOrganizationLayoutImport } from './routes/create-organization/_layout'
import { Route as authLayoutImport } from './routes/(auth)/_layout'
import { Route as OrganizationSlugLayoutImport } from './routes/$organizationSlug/_layout'
import { Route as InvitationLayoutIndexImport } from './routes/invitation/_layout.index'
import { Route as CreateOrganizationLayoutIndexImport } from './routes/create-organization/_layout.index'
import { Route as OrganizationSlugLayoutIndexImport } from './routes/$organizationSlug/_layout.index'
import { Route as authLayoutSignUpImport } from './routes/(auth)/_layout.sign-up'
import { Route as authLayoutResetPasswordImport } from './routes/(auth)/_layout.reset-password'
import { Route as authLayoutLoginImport } from './routes/(auth)/_layout.login'
import { Route as authLayoutForgotPasswordImport } from './routes/(auth)/_layout.forgot-password'
import { Route as OrganizationSlugLayoutStatusUpdateImport } from './routes/$organizationSlug/_layout.status-update'
import { Route as OrganizationSlugLayoutSettingsImport } from './routes/$organizationSlug/_layout.settings'
import { Route as OrganizationSlugLayoutUsersIndexImport } from './routes/$organizationSlug/_layout.users/index'
import { Route as OrganizationSlugLayoutTeamsIndexImport } from './routes/$organizationSlug/_layout.teams/index'
import { Route as OrganizationSlugLayoutUsersUserIdImport } from './routes/$organizationSlug/_layout.users/$userId'
import { Route as OrganizationSlugLayoutTeamsTeamIdImport } from './routes/$organizationSlug/_layout.teams/$teamId'

// Create Virtual Routes

const InvitationImport = createFileRoute('/invitation')()
const CreateOrganizationImport = createFileRoute('/create-organization')()
const authImport = createFileRoute('/(auth)')()
const OrganizationSlugImport = createFileRoute('/$organizationSlug')()

// Create/Update Routes

const InvitationRoute = InvitationImport.update({
  id: '/invitation',
  path: '/invitation',
  getParentRoute: () => rootRoute,
} as any)

const CreateOrganizationRoute = CreateOrganizationImport.update({
  id: '/create-organization',
  path: '/create-organization',
  getParentRoute: () => rootRoute,
} as any)

const authRoute = authImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRoute,
} as any)

const OrganizationSlugRoute = OrganizationSlugImport.update({
  id: '/$organizationSlug',
  path: '/$organizationSlug',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const InvitationLayoutRoute = InvitationLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => InvitationRoute,
} as any)

const CreateOrganizationLayoutRoute = CreateOrganizationLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => CreateOrganizationRoute,
} as any)

const authLayoutRoute = authLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => authRoute,
} as any)

const OrganizationSlugLayoutRoute = OrganizationSlugLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => OrganizationSlugRoute,
} as any)

const InvitationLayoutIndexRoute = InvitationLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => InvitationLayoutRoute,
} as any)

const CreateOrganizationLayoutIndexRoute =
  CreateOrganizationLayoutIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => CreateOrganizationLayoutRoute,
  } as any)

const OrganizationSlugLayoutIndexRoute =
  OrganizationSlugLayoutIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => OrganizationSlugLayoutRoute,
  } as any)

const authLayoutSignUpRoute = authLayoutSignUpImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => authLayoutRoute,
} as any)

const authLayoutResetPasswordRoute = authLayoutResetPasswordImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => authLayoutRoute,
} as any)

const authLayoutLoginRoute = authLayoutLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authLayoutRoute,
} as any)

const authLayoutForgotPasswordRoute = authLayoutForgotPasswordImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => authLayoutRoute,
} as any)

const OrganizationSlugLayoutStatusUpdateRoute =
  OrganizationSlugLayoutStatusUpdateImport.update({
    id: '/status-update',
    path: '/status-update',
    getParentRoute: () => OrganizationSlugLayoutRoute,
  } as any)

const OrganizationSlugLayoutSettingsRoute =
  OrganizationSlugLayoutSettingsImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => OrganizationSlugLayoutRoute,
  } as any)

const OrganizationSlugLayoutUsersIndexRoute =
  OrganizationSlugLayoutUsersIndexImport.update({
    id: '/users/',
    path: '/users/',
    getParentRoute: () => OrganizationSlugLayoutRoute,
  } as any)

const OrganizationSlugLayoutTeamsIndexRoute =
  OrganizationSlugLayoutTeamsIndexImport.update({
    id: '/teams/',
    path: '/teams/',
    getParentRoute: () => OrganizationSlugLayoutRoute,
  } as any)

const OrganizationSlugLayoutUsersUserIdRoute =
  OrganizationSlugLayoutUsersUserIdImport.update({
    id: '/users/$userId',
    path: '/users/$userId',
    getParentRoute: () => OrganizationSlugLayoutRoute,
  } as any)

const OrganizationSlugLayoutTeamsTeamIdRoute =
  OrganizationSlugLayoutTeamsTeamIdImport.update({
    id: '/teams/$teamId',
    path: '/teams/$teamId',
    getParentRoute: () => OrganizationSlugLayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/$organizationSlug': {
      id: '/$organizationSlug'
      path: '/$organizationSlug'
      fullPath: '/$organizationSlug'
      preLoaderRoute: typeof OrganizationSlugImport
      parentRoute: typeof rootRoute
    }
    '/$organizationSlug/_layout': {
      id: '/$organizationSlug/_layout'
      path: '/$organizationSlug'
      fullPath: '/$organizationSlug'
      preLoaderRoute: typeof OrganizationSlugLayoutImport
      parentRoute: typeof OrganizationSlugRoute
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/_layout': {
      id: '/(auth)/_layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authLayoutImport
      parentRoute: typeof authRoute
    }
    '/create-organization': {
      id: '/create-organization'
      path: '/create-organization'
      fullPath: '/create-organization'
      preLoaderRoute: typeof CreateOrganizationImport
      parentRoute: typeof rootRoute
    }
    '/create-organization/_layout': {
      id: '/create-organization/_layout'
      path: '/create-organization'
      fullPath: '/create-organization'
      preLoaderRoute: typeof CreateOrganizationLayoutImport
      parentRoute: typeof CreateOrganizationRoute
    }
    '/invitation': {
      id: '/invitation'
      path: '/invitation'
      fullPath: '/invitation'
      preLoaderRoute: typeof InvitationImport
      parentRoute: typeof rootRoute
    }
    '/invitation/_layout': {
      id: '/invitation/_layout'
      path: '/invitation'
      fullPath: '/invitation'
      preLoaderRoute: typeof InvitationLayoutImport
      parentRoute: typeof InvitationRoute
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/$organizationSlug/_layout/settings': {
      id: '/$organizationSlug/_layout/settings'
      path: '/settings'
      fullPath: '/$organizationSlug/settings'
      preLoaderRoute: typeof OrganizationSlugLayoutSettingsImport
      parentRoute: typeof OrganizationSlugLayoutImport
    }
    '/$organizationSlug/_layout/status-update': {
      id: '/$organizationSlug/_layout/status-update'
      path: '/status-update'
      fullPath: '/$organizationSlug/status-update'
      preLoaderRoute: typeof OrganizationSlugLayoutStatusUpdateImport
      parentRoute: typeof OrganizationSlugLayoutImport
    }
    '/(auth)/_layout/forgot-password': {
      id: '/(auth)/_layout/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof authLayoutForgotPasswordImport
      parentRoute: typeof authLayoutImport
    }
    '/(auth)/_layout/login': {
      id: '/(auth)/_layout/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLayoutLoginImport
      parentRoute: typeof authLayoutImport
    }
    '/(auth)/_layout/reset-password': {
      id: '/(auth)/_layout/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof authLayoutResetPasswordImport
      parentRoute: typeof authLayoutImport
    }
    '/(auth)/_layout/sign-up': {
      id: '/(auth)/_layout/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof authLayoutSignUpImport
      parentRoute: typeof authLayoutImport
    }
    '/$organizationSlug/_layout/': {
      id: '/$organizationSlug/_layout/'
      path: '/'
      fullPath: '/$organizationSlug/'
      preLoaderRoute: typeof OrganizationSlugLayoutIndexImport
      parentRoute: typeof OrganizationSlugLayoutImport
    }
    '/create-organization/_layout/': {
      id: '/create-organization/_layout/'
      path: '/'
      fullPath: '/create-organization/'
      preLoaderRoute: typeof CreateOrganizationLayoutIndexImport
      parentRoute: typeof CreateOrganizationLayoutImport
    }
    '/invitation/_layout/': {
      id: '/invitation/_layout/'
      path: '/'
      fullPath: '/invitation/'
      preLoaderRoute: typeof InvitationLayoutIndexImport
      parentRoute: typeof InvitationLayoutImport
    }
    '/$organizationSlug/_layout/teams/$teamId': {
      id: '/$organizationSlug/_layout/teams/$teamId'
      path: '/teams/$teamId'
      fullPath: '/$organizationSlug/teams/$teamId'
      preLoaderRoute: typeof OrganizationSlugLayoutTeamsTeamIdImport
      parentRoute: typeof OrganizationSlugLayoutImport
    }
    '/$organizationSlug/_layout/users/$userId': {
      id: '/$organizationSlug/_layout/users/$userId'
      path: '/users/$userId'
      fullPath: '/$organizationSlug/users/$userId'
      preLoaderRoute: typeof OrganizationSlugLayoutUsersUserIdImport
      parentRoute: typeof OrganizationSlugLayoutImport
    }
    '/$organizationSlug/_layout/teams/': {
      id: '/$organizationSlug/_layout/teams/'
      path: '/teams'
      fullPath: '/$organizationSlug/teams'
      preLoaderRoute: typeof OrganizationSlugLayoutTeamsIndexImport
      parentRoute: typeof OrganizationSlugLayoutImport
    }
    '/$organizationSlug/_layout/users/': {
      id: '/$organizationSlug/_layout/users/'
      path: '/users'
      fullPath: '/$organizationSlug/users'
      preLoaderRoute: typeof OrganizationSlugLayoutUsersIndexImport
      parentRoute: typeof OrganizationSlugLayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutIndexRoute: typeof LayoutIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutIndexRoute: LayoutIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

interface OrganizationSlugLayoutRouteChildren {
  OrganizationSlugLayoutSettingsRoute: typeof OrganizationSlugLayoutSettingsRoute
  OrganizationSlugLayoutStatusUpdateRoute: typeof OrganizationSlugLayoutStatusUpdateRoute
  OrganizationSlugLayoutIndexRoute: typeof OrganizationSlugLayoutIndexRoute
  OrganizationSlugLayoutTeamsTeamIdRoute: typeof OrganizationSlugLayoutTeamsTeamIdRoute
  OrganizationSlugLayoutUsersUserIdRoute: typeof OrganizationSlugLayoutUsersUserIdRoute
  OrganizationSlugLayoutTeamsIndexRoute: typeof OrganizationSlugLayoutTeamsIndexRoute
  OrganizationSlugLayoutUsersIndexRoute: typeof OrganizationSlugLayoutUsersIndexRoute
}

const OrganizationSlugLayoutRouteChildren: OrganizationSlugLayoutRouteChildren =
  {
    OrganizationSlugLayoutSettingsRoute: OrganizationSlugLayoutSettingsRoute,
    OrganizationSlugLayoutStatusUpdateRoute:
      OrganizationSlugLayoutStatusUpdateRoute,
    OrganizationSlugLayoutIndexRoute: OrganizationSlugLayoutIndexRoute,
    OrganizationSlugLayoutTeamsTeamIdRoute:
      OrganizationSlugLayoutTeamsTeamIdRoute,
    OrganizationSlugLayoutUsersUserIdRoute:
      OrganizationSlugLayoutUsersUserIdRoute,
    OrganizationSlugLayoutTeamsIndexRoute:
      OrganizationSlugLayoutTeamsIndexRoute,
    OrganizationSlugLayoutUsersIndexRoute:
      OrganizationSlugLayoutUsersIndexRoute,
  }

const OrganizationSlugLayoutRouteWithChildren =
  OrganizationSlugLayoutRoute._addFileChildren(
    OrganizationSlugLayoutRouteChildren,
  )

interface OrganizationSlugRouteChildren {
  OrganizationSlugLayoutRoute: typeof OrganizationSlugLayoutRouteWithChildren
}

const OrganizationSlugRouteChildren: OrganizationSlugRouteChildren = {
  OrganizationSlugLayoutRoute: OrganizationSlugLayoutRouteWithChildren,
}

const OrganizationSlugRouteWithChildren =
  OrganizationSlugRoute._addFileChildren(OrganizationSlugRouteChildren)

interface authLayoutRouteChildren {
  authLayoutForgotPasswordRoute: typeof authLayoutForgotPasswordRoute
  authLayoutLoginRoute: typeof authLayoutLoginRoute
  authLayoutResetPasswordRoute: typeof authLayoutResetPasswordRoute
  authLayoutSignUpRoute: typeof authLayoutSignUpRoute
}

const authLayoutRouteChildren: authLayoutRouteChildren = {
  authLayoutForgotPasswordRoute: authLayoutForgotPasswordRoute,
  authLayoutLoginRoute: authLayoutLoginRoute,
  authLayoutResetPasswordRoute: authLayoutResetPasswordRoute,
  authLayoutSignUpRoute: authLayoutSignUpRoute,
}

const authLayoutRouteWithChildren = authLayoutRoute._addFileChildren(
  authLayoutRouteChildren,
)

interface authRouteChildren {
  authLayoutRoute: typeof authLayoutRouteWithChildren
}

const authRouteChildren: authRouteChildren = {
  authLayoutRoute: authLayoutRouteWithChildren,
}

const authRouteWithChildren = authRoute._addFileChildren(authRouteChildren)

interface CreateOrganizationLayoutRouteChildren {
  CreateOrganizationLayoutIndexRoute: typeof CreateOrganizationLayoutIndexRoute
}

const CreateOrganizationLayoutRouteChildren: CreateOrganizationLayoutRouteChildren =
  {
    CreateOrganizationLayoutIndexRoute: CreateOrganizationLayoutIndexRoute,
  }

const CreateOrganizationLayoutRouteWithChildren =
  CreateOrganizationLayoutRoute._addFileChildren(
    CreateOrganizationLayoutRouteChildren,
  )

interface CreateOrganizationRouteChildren {
  CreateOrganizationLayoutRoute: typeof CreateOrganizationLayoutRouteWithChildren
}

const CreateOrganizationRouteChildren: CreateOrganizationRouteChildren = {
  CreateOrganizationLayoutRoute: CreateOrganizationLayoutRouteWithChildren,
}

const CreateOrganizationRouteWithChildren =
  CreateOrganizationRoute._addFileChildren(CreateOrganizationRouteChildren)

interface InvitationLayoutRouteChildren {
  InvitationLayoutIndexRoute: typeof InvitationLayoutIndexRoute
}

const InvitationLayoutRouteChildren: InvitationLayoutRouteChildren = {
  InvitationLayoutIndexRoute: InvitationLayoutIndexRoute,
}

const InvitationLayoutRouteWithChildren =
  InvitationLayoutRoute._addFileChildren(InvitationLayoutRouteChildren)

interface InvitationRouteChildren {
  InvitationLayoutRoute: typeof InvitationLayoutRouteWithChildren
}

const InvitationRouteChildren: InvitationRouteChildren = {
  InvitationLayoutRoute: InvitationLayoutRouteWithChildren,
}

const InvitationRouteWithChildren = InvitationRoute._addFileChildren(
  InvitationRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren
  '/$organizationSlug': typeof OrganizationSlugLayoutRouteWithChildren
  '/': typeof LayoutIndexRoute
  '/create-organization': typeof CreateOrganizationLayoutRouteWithChildren
  '/invitation': typeof InvitationLayoutRouteWithChildren
  '/$organizationSlug/settings': typeof OrganizationSlugLayoutSettingsRoute
  '/$organizationSlug/status-update': typeof OrganizationSlugLayoutStatusUpdateRoute
  '/forgot-password': typeof authLayoutForgotPasswordRoute
  '/login': typeof authLayoutLoginRoute
  '/reset-password': typeof authLayoutResetPasswordRoute
  '/sign-up': typeof authLayoutSignUpRoute
  '/$organizationSlug/': typeof OrganizationSlugLayoutIndexRoute
  '/create-organization/': typeof CreateOrganizationLayoutIndexRoute
  '/invitation/': typeof InvitationLayoutIndexRoute
  '/$organizationSlug/teams/$teamId': typeof OrganizationSlugLayoutTeamsTeamIdRoute
  '/$organizationSlug/users/$userId': typeof OrganizationSlugLayoutUsersUserIdRoute
  '/$organizationSlug/teams': typeof OrganizationSlugLayoutTeamsIndexRoute
  '/$organizationSlug/users': typeof OrganizationSlugLayoutUsersIndexRoute
}

export interface FileRoutesByTo {
  '/$organizationSlug': typeof OrganizationSlugLayoutIndexRoute
  '/': typeof LayoutIndexRoute
  '/create-organization': typeof CreateOrganizationLayoutIndexRoute
  '/invitation': typeof InvitationLayoutIndexRoute
  '/$organizationSlug/settings': typeof OrganizationSlugLayoutSettingsRoute
  '/$organizationSlug/status-update': typeof OrganizationSlugLayoutStatusUpdateRoute
  '/forgot-password': typeof authLayoutForgotPasswordRoute
  '/login': typeof authLayoutLoginRoute
  '/reset-password': typeof authLayoutResetPasswordRoute
  '/sign-up': typeof authLayoutSignUpRoute
  '/$organizationSlug/teams/$teamId': typeof OrganizationSlugLayoutTeamsTeamIdRoute
  '/$organizationSlug/users/$userId': typeof OrganizationSlugLayoutUsersUserIdRoute
  '/$organizationSlug/teams': typeof OrganizationSlugLayoutTeamsIndexRoute
  '/$organizationSlug/users': typeof OrganizationSlugLayoutUsersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/$organizationSlug': typeof OrganizationSlugRouteWithChildren
  '/$organizationSlug/_layout': typeof OrganizationSlugLayoutRouteWithChildren
  '/(auth)': typeof authRouteWithChildren
  '/(auth)/_layout': typeof authLayoutRouteWithChildren
  '/create-organization': typeof CreateOrganizationRouteWithChildren
  '/create-organization/_layout': typeof CreateOrganizationLayoutRouteWithChildren
  '/invitation': typeof InvitationRouteWithChildren
  '/invitation/_layout': typeof InvitationLayoutRouteWithChildren
  '/_layout/': typeof LayoutIndexRoute
  '/$organizationSlug/_layout/settings': typeof OrganizationSlugLayoutSettingsRoute
  '/$organizationSlug/_layout/status-update': typeof OrganizationSlugLayoutStatusUpdateRoute
  '/(auth)/_layout/forgot-password': typeof authLayoutForgotPasswordRoute
  '/(auth)/_layout/login': typeof authLayoutLoginRoute
  '/(auth)/_layout/reset-password': typeof authLayoutResetPasswordRoute
  '/(auth)/_layout/sign-up': typeof authLayoutSignUpRoute
  '/$organizationSlug/_layout/': typeof OrganizationSlugLayoutIndexRoute
  '/create-organization/_layout/': typeof CreateOrganizationLayoutIndexRoute
  '/invitation/_layout/': typeof InvitationLayoutIndexRoute
  '/$organizationSlug/_layout/teams/$teamId': typeof OrganizationSlugLayoutTeamsTeamIdRoute
  '/$organizationSlug/_layout/users/$userId': typeof OrganizationSlugLayoutUsersUserIdRoute
  '/$organizationSlug/_layout/teams/': typeof OrganizationSlugLayoutTeamsIndexRoute
  '/$organizationSlug/_layout/users/': typeof OrganizationSlugLayoutUsersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/$organizationSlug'
    | '/'
    | '/create-organization'
    | '/invitation'
    | '/$organizationSlug/settings'
    | '/$organizationSlug/status-update'
    | '/forgot-password'
    | '/login'
    | '/reset-password'
    | '/sign-up'
    | '/$organizationSlug/'
    | '/create-organization/'
    | '/invitation/'
    | '/$organizationSlug/teams/$teamId'
    | '/$organizationSlug/users/$userId'
    | '/$organizationSlug/teams'
    | '/$organizationSlug/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/$organizationSlug'
    | '/'
    | '/create-organization'
    | '/invitation'
    | '/$organizationSlug/settings'
    | '/$organizationSlug/status-update'
    | '/forgot-password'
    | '/login'
    | '/reset-password'
    | '/sign-up'
    | '/$organizationSlug/teams/$teamId'
    | '/$organizationSlug/users/$userId'
    | '/$organizationSlug/teams'
    | '/$organizationSlug/users'
  id:
    | '__root__'
    | '/_layout'
    | '/$organizationSlug'
    | '/$organizationSlug/_layout'
    | '/(auth)'
    | '/(auth)/_layout'
    | '/create-organization'
    | '/create-organization/_layout'
    | '/invitation'
    | '/invitation/_layout'
    | '/_layout/'
    | '/$organizationSlug/_layout/settings'
    | '/$organizationSlug/_layout/status-update'
    | '/(auth)/_layout/forgot-password'
    | '/(auth)/_layout/login'
    | '/(auth)/_layout/reset-password'
    | '/(auth)/_layout/sign-up'
    | '/$organizationSlug/_layout/'
    | '/create-organization/_layout/'
    | '/invitation/_layout/'
    | '/$organizationSlug/_layout/teams/$teamId'
    | '/$organizationSlug/_layout/users/$userId'
    | '/$organizationSlug/_layout/teams/'
    | '/$organizationSlug/_layout/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  OrganizationSlugRoute: typeof OrganizationSlugRouteWithChildren
  authRoute: typeof authRouteWithChildren
  CreateOrganizationRoute: typeof CreateOrganizationRouteWithChildren
  InvitationRoute: typeof InvitationRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  OrganizationSlugRoute: OrganizationSlugRouteWithChildren,
  authRoute: authRouteWithChildren,
  CreateOrganizationRoute: CreateOrganizationRouteWithChildren,
  InvitationRoute: InvitationRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout",
        "/$organizationSlug",
        "/(auth)",
        "/create-organization",
        "/invitation"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/"
      ]
    },
    "/$organizationSlug": {
      "filePath": "$organizationSlug",
      "children": [
        "/$organizationSlug/_layout"
      ]
    },
    "/$organizationSlug/_layout": {
      "filePath": "$organizationSlug/_layout.tsx",
      "parent": "/$organizationSlug",
      "children": [
        "/$organizationSlug/_layout/settings",
        "/$organizationSlug/_layout/status-update",
        "/$organizationSlug/_layout/",
        "/$organizationSlug/_layout/teams/$teamId",
        "/$organizationSlug/_layout/users/$userId",
        "/$organizationSlug/_layout/teams/",
        "/$organizationSlug/_layout/users/"
      ]
    },
    "/(auth)": {
      "filePath": "(auth)",
      "children": [
        "/(auth)/_layout"
      ]
    },
    "/(auth)/_layout": {
      "filePath": "(auth)/_layout.tsx",
      "parent": "/(auth)",
      "children": [
        "/(auth)/_layout/forgot-password",
        "/(auth)/_layout/login",
        "/(auth)/_layout/reset-password",
        "/(auth)/_layout/sign-up"
      ]
    },
    "/create-organization": {
      "filePath": "create-organization",
      "children": [
        "/create-organization/_layout"
      ]
    },
    "/create-organization/_layout": {
      "filePath": "create-organization/_layout.tsx",
      "parent": "/create-organization",
      "children": [
        "/create-organization/_layout/"
      ]
    },
    "/invitation": {
      "filePath": "invitation",
      "children": [
        "/invitation/_layout"
      ]
    },
    "/invitation/_layout": {
      "filePath": "invitation/_layout.tsx",
      "parent": "/invitation",
      "children": [
        "/invitation/_layout/"
      ]
    },
    "/_layout/": {
      "filePath": "_layout.index.tsx",
      "parent": "/_layout"
    },
    "/$organizationSlug/_layout/settings": {
      "filePath": "$organizationSlug/_layout.settings.tsx",
      "parent": "/$organizationSlug/_layout"
    },
    "/$organizationSlug/_layout/status-update": {
      "filePath": "$organizationSlug/_layout.status-update.tsx",
      "parent": "/$organizationSlug/_layout"
    },
    "/(auth)/_layout/forgot-password": {
      "filePath": "(auth)/_layout.forgot-password.tsx",
      "parent": "/(auth)/_layout"
    },
    "/(auth)/_layout/login": {
      "filePath": "(auth)/_layout.login.tsx",
      "parent": "/(auth)/_layout"
    },
    "/(auth)/_layout/reset-password": {
      "filePath": "(auth)/_layout.reset-password.tsx",
      "parent": "/(auth)/_layout"
    },
    "/(auth)/_layout/sign-up": {
      "filePath": "(auth)/_layout.sign-up.tsx",
      "parent": "/(auth)/_layout"
    },
    "/$organizationSlug/_layout/": {
      "filePath": "$organizationSlug/_layout.index.tsx",
      "parent": "/$organizationSlug/_layout"
    },
    "/create-organization/_layout/": {
      "filePath": "create-organization/_layout.index.tsx",
      "parent": "/create-organization/_layout"
    },
    "/invitation/_layout/": {
      "filePath": "invitation/_layout.index.tsx",
      "parent": "/invitation/_layout"
    },
    "/$organizationSlug/_layout/teams/$teamId": {
      "filePath": "$organizationSlug/_layout.teams/$teamId.tsx",
      "parent": "/$organizationSlug/_layout"
    },
    "/$organizationSlug/_layout/users/$userId": {
      "filePath": "$organizationSlug/_layout.users/$userId.tsx",
      "parent": "/$organizationSlug/_layout"
    },
    "/$organizationSlug/_layout/teams/": {
      "filePath": "$organizationSlug/_layout.teams/index.tsx",
      "parent": "/$organizationSlug/_layout"
    },
    "/$organizationSlug/_layout/users/": {
      "filePath": "$organizationSlug/_layout.users/index.tsx",
      "parent": "/$organizationSlug/_layout"
    }
  }
}
ROUTE_MANIFEST_END */

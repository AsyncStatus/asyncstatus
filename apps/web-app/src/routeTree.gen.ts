/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout.index'
import { Route as CreateOrganizationLayoutImport } from './routes/create-organization/_layout'
import { Route as authLayoutImport } from './routes/(auth)/_layout'
import { Route as OrganizationSlugLayoutImport } from './routes/$organizationSlug/_layout'
import { Route as CreateOrganizationLayoutIndexImport } from './routes/create-organization/_layout.index'
import { Route as OrganizationSlugLayoutIndexImport } from './routes/$organizationSlug/_layout.index'
import { Route as authLayoutSignUpImport } from './routes/(auth)/_layout.sign-up'
import { Route as authLayoutResetPasswordImport } from './routes/(auth)/_layout.reset-password'
import { Route as authLayoutLoginImport } from './routes/(auth)/_layout.login'
import { Route as authLayoutForgotPasswordImport } from './routes/(auth)/_layout.forgot-password'
import { Route as OrganizationSlugLayoutUsersImport } from './routes/$organizationSlug/_layout.users'
import { Route as OrganizationSlugLayoutSettingsImport } from './routes/$organizationSlug/_layout.settings'

// Create Virtual Routes

const CreateOrganizationImport = createFileRoute('/create-organization')()
const authImport = createFileRoute('/(auth)')()
const OrganizationSlugImport = createFileRoute('/$organizationSlug')()

// Create/Update Routes

const CreateOrganizationRoute = CreateOrganizationImport.update({
  id: '/create-organization',
  path: '/create-organization',
  getParentRoute: () => rootRoute,
} as any)

const authRoute = authImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRoute,
} as any)

const OrganizationSlugRoute = OrganizationSlugImport.update({
  id: '/$organizationSlug',
  path: '/$organizationSlug',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const CreateOrganizationLayoutRoute = CreateOrganizationLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => CreateOrganizationRoute,
} as any)

const authLayoutRoute = authLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => authRoute,
} as any)

const OrganizationSlugLayoutRoute = OrganizationSlugLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => OrganizationSlugRoute,
} as any)

const CreateOrganizationLayoutIndexRoute =
  CreateOrganizationLayoutIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => CreateOrganizationLayoutRoute,
  } as any)

const OrganizationSlugLayoutIndexRoute =
  OrganizationSlugLayoutIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => OrganizationSlugLayoutRoute,
  } as any)

const authLayoutSignUpRoute = authLayoutSignUpImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => authLayoutRoute,
} as any)

const authLayoutResetPasswordRoute = authLayoutResetPasswordImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => authLayoutRoute,
} as any)

const authLayoutLoginRoute = authLayoutLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authLayoutRoute,
} as any)

const authLayoutForgotPasswordRoute = authLayoutForgotPasswordImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => authLayoutRoute,
} as any)

const OrganizationSlugLayoutUsersRoute =
  OrganizationSlugLayoutUsersImport.update({
    id: '/users',
    path: '/users',
    getParentRoute: () => OrganizationSlugLayoutRoute,
  } as any)

const OrganizationSlugLayoutSettingsRoute =
  OrganizationSlugLayoutSettingsImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => OrganizationSlugLayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/$organizationSlug': {
      id: '/$organizationSlug'
      path: '/$organizationSlug'
      fullPath: '/$organizationSlug'
      preLoaderRoute: typeof OrganizationSlugImport
      parentRoute: typeof rootRoute
    }
    '/$organizationSlug/_layout': {
      id: '/$organizationSlug/_layout'
      path: '/$organizationSlug'
      fullPath: '/$organizationSlug'
      preLoaderRoute: typeof OrganizationSlugLayoutImport
      parentRoute: typeof OrganizationSlugRoute
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/_layout': {
      id: '/(auth)/_layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authLayoutImport
      parentRoute: typeof authRoute
    }
    '/create-organization': {
      id: '/create-organization'
      path: '/create-organization'
      fullPath: '/create-organization'
      preLoaderRoute: typeof CreateOrganizationImport
      parentRoute: typeof rootRoute
    }
    '/create-organization/_layout': {
      id: '/create-organization/_layout'
      path: '/create-organization'
      fullPath: '/create-organization'
      preLoaderRoute: typeof CreateOrganizationLayoutImport
      parentRoute: typeof CreateOrganizationRoute
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/$organizationSlug/_layout/settings': {
      id: '/$organizationSlug/_layout/settings'
      path: '/settings'
      fullPath: '/$organizationSlug/settings'
      preLoaderRoute: typeof OrganizationSlugLayoutSettingsImport
      parentRoute: typeof OrganizationSlugLayoutImport
    }
    '/$organizationSlug/_layout/users': {
      id: '/$organizationSlug/_layout/users'
      path: '/users'
      fullPath: '/$organizationSlug/users'
      preLoaderRoute: typeof OrganizationSlugLayoutUsersImport
      parentRoute: typeof OrganizationSlugLayoutImport
    }
    '/(auth)/_layout/forgot-password': {
      id: '/(auth)/_layout/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof authLayoutForgotPasswordImport
      parentRoute: typeof authLayoutImport
    }
    '/(auth)/_layout/login': {
      id: '/(auth)/_layout/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLayoutLoginImport
      parentRoute: typeof authLayoutImport
    }
    '/(auth)/_layout/reset-password': {
      id: '/(auth)/_layout/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof authLayoutResetPasswordImport
      parentRoute: typeof authLayoutImport
    }
    '/(auth)/_layout/sign-up': {
      id: '/(auth)/_layout/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof authLayoutSignUpImport
      parentRoute: typeof authLayoutImport
    }
    '/$organizationSlug/_layout/': {
      id: '/$organizationSlug/_layout/'
      path: '/'
      fullPath: '/$organizationSlug/'
      preLoaderRoute: typeof OrganizationSlugLayoutIndexImport
      parentRoute: typeof OrganizationSlugLayoutImport
    }
    '/create-organization/_layout/': {
      id: '/create-organization/_layout/'
      path: '/'
      fullPath: '/create-organization/'
      preLoaderRoute: typeof CreateOrganizationLayoutIndexImport
      parentRoute: typeof CreateOrganizationLayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutIndexRoute: typeof LayoutIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutIndexRoute: LayoutIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

interface OrganizationSlugLayoutRouteChildren {
  OrganizationSlugLayoutSettingsRoute: typeof OrganizationSlugLayoutSettingsRoute
  OrganizationSlugLayoutUsersRoute: typeof OrganizationSlugLayoutUsersRoute
  OrganizationSlugLayoutIndexRoute: typeof OrganizationSlugLayoutIndexRoute
}

const OrganizationSlugLayoutRouteChildren: OrganizationSlugLayoutRouteChildren =
  {
    OrganizationSlugLayoutSettingsRoute: OrganizationSlugLayoutSettingsRoute,
    OrganizationSlugLayoutUsersRoute: OrganizationSlugLayoutUsersRoute,
    OrganizationSlugLayoutIndexRoute: OrganizationSlugLayoutIndexRoute,
  }

const OrganizationSlugLayoutRouteWithChildren =
  OrganizationSlugLayoutRoute._addFileChildren(
    OrganizationSlugLayoutRouteChildren,
  )

interface OrganizationSlugRouteChildren {
  OrganizationSlugLayoutRoute: typeof OrganizationSlugLayoutRouteWithChildren
}

const OrganizationSlugRouteChildren: OrganizationSlugRouteChildren = {
  OrganizationSlugLayoutRoute: OrganizationSlugLayoutRouteWithChildren,
}

const OrganizationSlugRouteWithChildren =
  OrganizationSlugRoute._addFileChildren(OrganizationSlugRouteChildren)

interface authLayoutRouteChildren {
  authLayoutForgotPasswordRoute: typeof authLayoutForgotPasswordRoute
  authLayoutLoginRoute: typeof authLayoutLoginRoute
  authLayoutResetPasswordRoute: typeof authLayoutResetPasswordRoute
  authLayoutSignUpRoute: typeof authLayoutSignUpRoute
}

const authLayoutRouteChildren: authLayoutRouteChildren = {
  authLayoutForgotPasswordRoute: authLayoutForgotPasswordRoute,
  authLayoutLoginRoute: authLayoutLoginRoute,
  authLayoutResetPasswordRoute: authLayoutResetPasswordRoute,
  authLayoutSignUpRoute: authLayoutSignUpRoute,
}

const authLayoutRouteWithChildren = authLayoutRoute._addFileChildren(
  authLayoutRouteChildren,
)

interface authRouteChildren {
  authLayoutRoute: typeof authLayoutRouteWithChildren
}

const authRouteChildren: authRouteChildren = {
  authLayoutRoute: authLayoutRouteWithChildren,
}

const authRouteWithChildren = authRoute._addFileChildren(authRouteChildren)

interface CreateOrganizationLayoutRouteChildren {
  CreateOrganizationLayoutIndexRoute: typeof CreateOrganizationLayoutIndexRoute
}

const CreateOrganizationLayoutRouteChildren: CreateOrganizationLayoutRouteChildren =
  {
    CreateOrganizationLayoutIndexRoute: CreateOrganizationLayoutIndexRoute,
  }

const CreateOrganizationLayoutRouteWithChildren =
  CreateOrganizationLayoutRoute._addFileChildren(
    CreateOrganizationLayoutRouteChildren,
  )

interface CreateOrganizationRouteChildren {
  CreateOrganizationLayoutRoute: typeof CreateOrganizationLayoutRouteWithChildren
}

const CreateOrganizationRouteChildren: CreateOrganizationRouteChildren = {
  CreateOrganizationLayoutRoute: CreateOrganizationLayoutRouteWithChildren,
}

const CreateOrganizationRouteWithChildren =
  CreateOrganizationRoute._addFileChildren(CreateOrganizationRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren
  '/$organizationSlug': typeof OrganizationSlugLayoutRouteWithChildren
  '/': typeof LayoutIndexRoute
  '/create-organization': typeof CreateOrganizationLayoutRouteWithChildren
  '/$organizationSlug/settings': typeof OrganizationSlugLayoutSettingsRoute
  '/$organizationSlug/users': typeof OrganizationSlugLayoutUsersRoute
  '/forgot-password': typeof authLayoutForgotPasswordRoute
  '/login': typeof authLayoutLoginRoute
  '/reset-password': typeof authLayoutResetPasswordRoute
  '/sign-up': typeof authLayoutSignUpRoute
  '/$organizationSlug/': typeof OrganizationSlugLayoutIndexRoute
  '/create-organization/': typeof CreateOrganizationLayoutIndexRoute
}

export interface FileRoutesByTo {
  '/$organizationSlug': typeof OrganizationSlugLayoutIndexRoute
  '/': typeof LayoutIndexRoute
  '/create-organization': typeof CreateOrganizationLayoutIndexRoute
  '/$organizationSlug/settings': typeof OrganizationSlugLayoutSettingsRoute
  '/$organizationSlug/users': typeof OrganizationSlugLayoutUsersRoute
  '/forgot-password': typeof authLayoutForgotPasswordRoute
  '/login': typeof authLayoutLoginRoute
  '/reset-password': typeof authLayoutResetPasswordRoute
  '/sign-up': typeof authLayoutSignUpRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/$organizationSlug': typeof OrganizationSlugRouteWithChildren
  '/$organizationSlug/_layout': typeof OrganizationSlugLayoutRouteWithChildren
  '/(auth)': typeof authRouteWithChildren
  '/(auth)/_layout': typeof authLayoutRouteWithChildren
  '/create-organization': typeof CreateOrganizationRouteWithChildren
  '/create-organization/_layout': typeof CreateOrganizationLayoutRouteWithChildren
  '/_layout/': typeof LayoutIndexRoute
  '/$organizationSlug/_layout/settings': typeof OrganizationSlugLayoutSettingsRoute
  '/$organizationSlug/_layout/users': typeof OrganizationSlugLayoutUsersRoute
  '/(auth)/_layout/forgot-password': typeof authLayoutForgotPasswordRoute
  '/(auth)/_layout/login': typeof authLayoutLoginRoute
  '/(auth)/_layout/reset-password': typeof authLayoutResetPasswordRoute
  '/(auth)/_layout/sign-up': typeof authLayoutSignUpRoute
  '/$organizationSlug/_layout/': typeof OrganizationSlugLayoutIndexRoute
  '/create-organization/_layout/': typeof CreateOrganizationLayoutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/$organizationSlug'
    | '/'
    | '/create-organization'
    | '/$organizationSlug/settings'
    | '/$organizationSlug/users'
    | '/forgot-password'
    | '/login'
    | '/reset-password'
    | '/sign-up'
    | '/$organizationSlug/'
    | '/create-organization/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/$organizationSlug'
    | '/'
    | '/create-organization'
    | '/$organizationSlug/settings'
    | '/$organizationSlug/users'
    | '/forgot-password'
    | '/login'
    | '/reset-password'
    | '/sign-up'
  id:
    | '__root__'
    | '/_layout'
    | '/$organizationSlug'
    | '/$organizationSlug/_layout'
    | '/(auth)'
    | '/(auth)/_layout'
    | '/create-organization'
    | '/create-organization/_layout'
    | '/_layout/'
    | '/$organizationSlug/_layout/settings'
    | '/$organizationSlug/_layout/users'
    | '/(auth)/_layout/forgot-password'
    | '/(auth)/_layout/login'
    | '/(auth)/_layout/reset-password'
    | '/(auth)/_layout/sign-up'
    | '/$organizationSlug/_layout/'
    | '/create-organization/_layout/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  OrganizationSlugRoute: typeof OrganizationSlugRouteWithChildren
  authRoute: typeof authRouteWithChildren
  CreateOrganizationRoute: typeof CreateOrganizationRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  OrganizationSlugRoute: OrganizationSlugRouteWithChildren,
  authRoute: authRouteWithChildren,
  CreateOrganizationRoute: CreateOrganizationRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout",
        "/$organizationSlug",
        "/(auth)",
        "/create-organization"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/"
      ]
    },
    "/$organizationSlug": {
      "filePath": "$organizationSlug",
      "children": [
        "/$organizationSlug/_layout"
      ]
    },
    "/$organizationSlug/_layout": {
      "filePath": "$organizationSlug/_layout.tsx",
      "parent": "/$organizationSlug",
      "children": [
        "/$organizationSlug/_layout/settings",
        "/$organizationSlug/_layout/users",
        "/$organizationSlug/_layout/"
      ]
    },
    "/(auth)": {
      "filePath": "(auth)",
      "children": [
        "/(auth)/_layout"
      ]
    },
    "/(auth)/_layout": {
      "filePath": "(auth)/_layout.tsx",
      "parent": "/(auth)",
      "children": [
        "/(auth)/_layout/forgot-password",
        "/(auth)/_layout/login",
        "/(auth)/_layout/reset-password",
        "/(auth)/_layout/sign-up"
      ]
    },
    "/create-organization": {
      "filePath": "create-organization",
      "children": [
        "/create-organization/_layout"
      ]
    },
    "/create-organization/_layout": {
      "filePath": "create-organization/_layout.tsx",
      "parent": "/create-organization",
      "children": [
        "/create-organization/_layout/"
      ]
    },
    "/_layout/": {
      "filePath": "_layout.index.tsx",
      "parent": "/_layout"
    },
    "/$organizationSlug/_layout/settings": {
      "filePath": "$organizationSlug/_layout.settings.tsx",
      "parent": "/$organizationSlug/_layout"
    },
    "/$organizationSlug/_layout/users": {
      "filePath": "$organizationSlug/_layout.users.tsx",
      "parent": "/$organizationSlug/_layout"
    },
    "/(auth)/_layout/forgot-password": {
      "filePath": "(auth)/_layout.forgot-password.tsx",
      "parent": "/(auth)/_layout"
    },
    "/(auth)/_layout/login": {
      "filePath": "(auth)/_layout.login.tsx",
      "parent": "/(auth)/_layout"
    },
    "/(auth)/_layout/reset-password": {
      "filePath": "(auth)/_layout.reset-password.tsx",
      "parent": "/(auth)/_layout"
    },
    "/(auth)/_layout/sign-up": {
      "filePath": "(auth)/_layout.sign-up.tsx",
      "parent": "/(auth)/_layout"
    },
    "/$organizationSlug/_layout/": {
      "filePath": "$organizationSlug/_layout.index.tsx",
      "parent": "/$organizationSlug/_layout"
    },
    "/create-organization/_layout/": {
      "filePath": "create-organization/_layout.index.tsx",
      "parent": "/create-organization/_layout"
    }
  }
}
ROUTE_MANIFEST_END */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as LayoutIndexRouteImport } from './routes/_layout.index'
import { Route as OwnerIndexRouteImport } from './routes/$owner/index'
import { Route as errorErrorRouteImport } from './routes/(error)/error'
import { Route as OwnerRepoIndexRouteImport } from './routes/$owner/$repo/index'
import { Route as OwnerRepoFiltersIndexRouteImport } from './routes/$owner/$repo/$filters/index'

const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutIndexRoute = LayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)
const OwnerIndexRoute = OwnerIndexRouteImport.update({
  id: '/$owner/',
  path: '/$owner/',
  getParentRoute: () => rootRouteImport,
} as any)
const errorErrorRoute = errorErrorRouteImport.update({
  id: '/(error)/error',
  path: '/error',
  getParentRoute: () => rootRouteImport,
} as any)
const OwnerRepoIndexRoute = OwnerRepoIndexRouteImport.update({
  id: '/$owner/$repo/',
  path: '/$owner/$repo/',
  getParentRoute: () => rootRouteImport,
} as any)
const OwnerRepoFiltersIndexRoute = OwnerRepoFiltersIndexRouteImport.update({
  id: '/$owner/$repo/$filters/',
  path: '/$owner/$repo/$filters/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/error': typeof errorErrorRoute
  '/$owner': typeof OwnerIndexRoute
  '/': typeof LayoutIndexRoute
  '/$owner/$repo': typeof OwnerRepoIndexRoute
  '/$owner/$repo/$filters': typeof OwnerRepoFiltersIndexRoute
}
export interface FileRoutesByTo {
  '/error': typeof errorErrorRoute
  '/$owner': typeof OwnerIndexRoute
  '/': typeof LayoutIndexRoute
  '/$owner/$repo': typeof OwnerRepoIndexRoute
  '/$owner/$repo/$filters': typeof OwnerRepoFiltersIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_layout': typeof LayoutRouteWithChildren
  '/(error)/error': typeof errorErrorRoute
  '/$owner/': typeof OwnerIndexRoute
  '/_layout/': typeof LayoutIndexRoute
  '/$owner/$repo/': typeof OwnerRepoIndexRoute
  '/$owner/$repo/$filters/': typeof OwnerRepoFiltersIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/error'
    | '/$owner'
    | '/'
    | '/$owner/$repo'
    | '/$owner/$repo/$filters'
  fileRoutesByTo: FileRoutesByTo
  to: '/error' | '/$owner' | '/' | '/$owner/$repo' | '/$owner/$repo/$filters'
  id:
    | '__root__'
    | '/_layout'
    | '/(error)/error'
    | '/$owner/'
    | '/_layout/'
    | '/$owner/$repo/'
    | '/$owner/$repo/$filters/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  errorErrorRoute: typeof errorErrorRoute
  OwnerIndexRoute: typeof OwnerIndexRoute
  OwnerRepoIndexRoute: typeof OwnerRepoIndexRoute
  OwnerRepoFiltersIndexRoute: typeof OwnerRepoFiltersIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/$owner/': {
      id: '/$owner/'
      path: '/$owner'
      fullPath: '/$owner'
      preLoaderRoute: typeof OwnerIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(error)/error': {
      id: '/(error)/error'
      path: '/error'
      fullPath: '/error'
      preLoaderRoute: typeof errorErrorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$owner/$repo/': {
      id: '/$owner/$repo/'
      path: '/$owner/$repo'
      fullPath: '/$owner/$repo'
      preLoaderRoute: typeof OwnerRepoIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$owner/$repo/$filters/': {
      id: '/$owner/$repo/$filters/'
      path: '/$owner/$repo/$filters'
      fullPath: '/$owner/$repo/$filters'
      preLoaderRoute: typeof OwnerRepoFiltersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface LayoutRouteChildren {
  LayoutIndexRoute: typeof LayoutIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutIndexRoute: LayoutIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  errorErrorRoute: errorErrorRoute,
  OwnerIndexRoute: OwnerIndexRoute,
  OwnerRepoIndexRoute: OwnerRepoIndexRoute,
  OwnerRepoFiltersIndexRoute: OwnerRepoFiltersIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
